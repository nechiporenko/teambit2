////
/// normalize-libsass 1.0.3
/// MIT/GPLv2 License
/// lb.cm/normalize-libsass
////

/*Normalize*/

/// Strict normalize
/// @type Boolean [false] - Set to true for strict normalize output.
$strict-normalize: false !default;

/// Font-size baseline
/// @type Length [16px]
$base-font-size: 16px !default;

/// Line-height baseline
/// @type Length [24px]
$base-line-height: 24px !default;

/// H1 headline size
/// @type Length [2 * 16px]
$h1-font-size: 2 * $base-font-size !default;

/// Rhythm unit
/// @type String [em] - Supported values: px, em, rem.
$rhythm-unit: 'em' !default;

/// Font-family baseline
/// @type Map [sans-serif]
$base-font-family: sans-serif !default;

/// Supported Browser versions
/// @type Map
$browser-min-version: (
  'chrome':  null,
  'firefox': null,
  'ie':      8,
  'safari':  6,
  'opera':   null
) !default;

// Assure no variables get overridden if strict is on
$normalize-base-font-size: if($strict-normalize, 16px, $base-font-size);
$normalize-base-line-height: if($strict-normalize, 24px, $base-line-height);
$normalize-h1-font-size: if($strict-normalize, 2 * $base-font-size, $h1-font-size);
$normalize-rhythm-unit: if($strict-normalize, 'em', $rhythm-unit);
$normalize-base-font-family: if($strict-normalize, sans-serif, $base-font-family);

/// Normalize Legacy Browser Support function
///
/// @requires {variable} browser
/// @requires {variable} version
///
/// @param {String} $browser - A valid browser name from $browser-minimum-versions.
/// @param {Number} $version - A browser version.
///
/// @return {Bool} - If browser is null or valid returns true.
@function normalize-browser-support($browser, $version) {
  // If browser is not null then check for support
  @if map-get($browser-min-version, $browser) {
    $supported-version: map-get($browser-min-version, $browser);
    // Pass if browser is supported or strict-normalize is on
    @if $strict-normalize or $supported-version <= $version {
      @return true;
    } @else {
      // Fail if browser is unsupported
      @return null;
    }
  }
  // Pass if browser is null
  @return true;
}

/// Convert one unit into another
/// @author Hugo Giraudel
///
/// @param {Number} $value - Initial value
/// @param {String} $unit - Desired unit
///
/// @return {Number}
/// @throw Error if `$unit` does not exist or if units are incompatible.
@function normalize-convert-unit($value, $unit) {
  // scss-lint:disable ZeroUnit
  $units: (
    'px': 0px,
    'cm': 0cm,
    'mm': 0mm,
    '%': 0%,
    'in': 0in,
    'em': 0em,
    'rem': 0rem,
    'pt': 0pt
  );
  // scss-lint:enable ZeroUnit

  @if map-has-key($units, $unit) {
    @return map-get($units, $unit) + $value;
  }

  @error "Unknown unit `#{$unit}`.";
}

html {
  font-family: $normalize-base-font-family; /* 1 */
  -ms-text-size-adjust: 100%; /* 2 */
  -webkit-text-size-adjust: 100%; /* 2 */
}


body {
  margin: 0;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

audio,
canvas,
progress,
video {
  @if normalize-browser-support('ie', 9) {
    display: inline-block; /* 1 */
  }
  vertical-align: baseline; /* 2 */
}


audio:not([controls]) {
  display: none;
  height: 0;
}

@if normalize-browser-support('ie', 10) {
  /**
   * Address `[hidden]` styling not present in IE 8/9/10.
   */

  [hidden] {
    display: none;
  }
}



template {
  display: none;
}


@if normalize-browser-support('ie', 10) {
  /**
   * Remove the gray background color from active links in IE 10.
   */

  a {
    background-color: transparent;
  }
}


a:active,
a:hover {
  outline: 0;
}

abbr[title] {
  border-bottom: 1px dotted;
}


b,
strong {
  font-weight: bold;
}


dfn {
  font-style: italic;
}


h1 {
  font-size: normalize-convert-unit(($normalize-h1-font-size / $normalize-base-font-size), $normalize-rhythm-unit);
  margin: normalize-convert-unit(($normalize-base-font-size / $normalize-base-line-height), $normalize-rhythm-unit) 0;
}

@if normalize-browser-support('ie', 9) {

  mark {
    background: #ff0;
    color: #000;
  }
}


small {
  font-size: 80%;
}


sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}



@if normalize-browser-support('ie', 10) {
  

  img {
    border: 0;
  }
}

@if normalize-browser-support('ie', 11) {
  

  svg:not(:root) {
    overflow: hidden;
  }
}


@if normalize-browser-support('ie', 9) or normalize-browser-support('safari', 6) {
  

  figure {
    //margin: 1em 40px;
    margin:0;
  }
}



hr {
  box-sizing: content-box;
  height: 0;
}



pre {
  overflow: auto;
}


code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}


button,
input,
optgroup,
select,
textarea {
  color: inherit; /* 1 */
  font: inherit; /* 2 */
  margin: 0; /* 3 */
}

@if normalize-browser-support('ie', 11) {
  

  button {
    overflow: visible;
  }
}


button,
select {
  text-transform: none;
}



button,
html input[type='button'], /* 1 */
input[type='reset'],
input[type='submit'] {
  -webkit-appearance: button; /* 2 */
  cursor: pointer; /* 3 */
}



button[disabled],
html input[disabled] {
  cursor: default;
}


button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}


input {
  line-height: normal;
}

@if normalize-browser-support('ie', 10) {

  input[type='checkbox'],
  input[type='radio'] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
  }
}



input[type='number']::-webkit-inner-spin-button,
input[type='number']::-webkit-outer-spin-button {
  height: auto;
}



input[type='search'] {
  box-sizing: content-box;
}


input[type='search']::-webkit-search-cancel-button,
input[type='search']::-webkit-search-decoration {
  -webkit-appearance: none;
}



fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}



legend {
  @if normalize-browser-support('ie', 11) {
    border: 0; /* 1 */
  }
  padding: 0; /* 2 */
}

@if normalize-browser-support('ie', 11) {
  

  textarea {
    overflow: auto;
  }
}



optgroup {
  font-weight: bold;
}



table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}
